---
modules:
  - docassemble.demo.accordion
---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALToolbox:collapse_template.yml
  - docassemble.GithubFeedbackForm:embedded_review.yml
---
metadata:
  title: >-
    Answer to Debt Collection Complaint
  short title: >-
    Answer to complaint aos
  description: |-
    Answer to Debt Collection Lawsuit Complaint
  can_I_use_this_form: |
    If you are being sued for a debt, you can use this interview to respond and claim defenses.
  before_you_start: |
    Before you get started, you need to...
  maturity: production
  estimated_completion_minutes: 60
  estimated_completion_delta: 30
  LIST_topics: 
    - "MO-00-00-00-00"
  tags:
    - "MO-00-00-00-00"
  authors:
    - Court Forms Online
  original_form: []
  original_form_published_on: ""
  allowed_courts: []
  typical_role: "defendant"
  al_weaver_version: "1.10.3"
  generated_on: "2024-07-31"
  languages:
    - en
  jurisdiction: NAM-US-US+MN
  review_date: 2024-07-31
  form_titles:
    - Answer to Debt Collection Complaint
  form_numbers: []
  update_notes: |
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "MN"
---
code: |
  AL_ORGANIZATION_TITLE = "Court Forms Online"
---
code: |
  github_repo_name =  'docassemble-AnswerToComplaintAos'
---
code: |
  interview_short_title = "Answer to Debt Collection Complaint"
---
code: |
  al_form_type = "existing_case" 
---
template: original_creditor_explanation
subject: |
  What is the original creditor?
content: |
  The original creditor is the person or business you first owed the debt to. Knowing who that is can be tricky. For example, if the debt was from a Sears charge card, you might think Sears is the original creditor, but the original creditor would actually be Citibank.
    
    In many debt collection lawsuits, the plaintiff is someone who bought the debt from the original creditor. That means the plaintiff is not the original creditor. If the plaintiff bought the debt from the original creditor, it may say so in the Complaint. Read through the paragraphs of the Complaint, and see if any of them say anything like this: "... on such and such a date, XYZ Collection Company (the Plaintiff) purchased the debt or obligation from ABC Business ... ".
    
    If you can't tell who the original creditor is, you might need to ask a lawyer.
---
template: admit_deny_explanation
subject: |
  IMPORTANT INFORMATION ABOUT ANSWERING THE COMPLAINT
content: |
  A Complaint is made up of a number of "paragraphs." Each paragraph should be labeled with a number. When you answer a Complaint, you do not answer it all at once. Instead, you respond to each paragraph, one by one. Answer every paragraph. 
  
  Read each paragraph carefully and <b>don't Admit the paragraph unless you know that all the claims are true</b>. For example, a paragraph may say that the Plaintiff is the original creditor, or that they bought the debt from the original creditor. Do you know this is true? Do you recognize the Plaintiff's name from when the debt started? If the Plaintiff says they bought the debt, have they shown you proof? 
  
  Look for typos or mistakes. For example, the first paragraph may just say what your name is, like this: "<i>Defendant's name is Test Test</i>". If it gets your name right, then you "Admit" that the paragraph is true. If it gets your name wrong, you can "Deny" that it is true. 
  
  Another paragraph may say you owe $4,546.24. Do you know if fees and interest were added to your debt? If so, do you know if they were added up correctly? Do you know if you even agreed to pay each of those fees in the contract you signed? Have you re-read the contract, and checked the math yourself? If you don't know, just click "Do Not Know."

  Some paragraphs may make more than one claim. <b>Do not Admit the paragraph unless you know that all the claims are true.</b>

  <b>Remember these three simple rules:</b>
  
  - Do not Admit anything unless you know it is true.
  - Do not Deny anything unless you know it is false. 
  - If you do not know, just click "Do Not Know."
---
objects:
  - users: ALPeopleList.using(target_number=1, ask_number=True)
  - the_courts: ALCourtLoader.using(filename="Courts.xlsx")
  - other_parties: ALPeopleList.using(target_number=1, ask_number=True)
#  - attorneys: ALPeopleList.using(there_is_another=False)
  - other_parties[i].attorney: ALIndividual
  - server_address: ALAddress
---
sections:
  - review_answer_to_complaint_aos: Review your answers
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_answer_to_complaint_aos
code: |
  # Set the allowed courts for this interview
  allowed_courts = []
  nav.set_section("review_answer_to_complaint_aos")
  user_role = "defendant"
  user_ask_role = "defendant"
  if ineligible_cases == True:
    kick_out
  if ineligible_cases == False:
    trial_court_district
  trial_court_district
  display_court
  docket_number
  set_progress(16)
  users_name
  users[0].address.address
  users[0].phone_number
  set_parts(subtitle=str(users))
  account_number
  admit
  set_progress(48)
  defense_insufficient_service
  type_of_debt 
  exemptions
  need_based    
  non_need_based
  job_income
  if job_income == "Yes":
    other_parties.gather()          # i believe i need to add the remainder of the interview logic that follows other_parties below here. the logic doesn't know to skip below and pick up at that point.
  if job_income == "No":
    any_income
    if any_income == "Yes":
      other_parties.gather()        # i believe i need to add the remainder of the interview logic that follows other_parties below here. the logic doesn't know to skip below and pick up at that point.
    if any_income == "No":
      bank_account
      if bank_account == "Yes":
        proof
        basic_living_expenses
        long_term_income
        asset_exemptions
        own_car
        if own_car == "No":
          real_estate
        if own_car == "Yes":
          multiple_cars
          if multiple_cars == "Yes":
            real_estate
          if multiple_cars == "No":
            primary_transportation
            if primary_transportation == "Yes":
              car_equity
              if car_equity == "under_4k":
                car_collateral
              real_estate
            if primary_transportation == "No":
              real_estate
              if real_estate == "Yes":
                own_home
                if own_home == "Yes":
                  other_real_estate
                  if other_real_estate == "No":
                    farm
      if bank_account == "No":
        proof
        basic_living_expenses      
        long_term_income
        asset_exemptions
        own_car
        if own_car == "No":
          real_estate
        if own_car == "Yes":
          multiple_cars
          if multiple_cars == "Yes":
            real_estate
          if multiple_cars == "No":
            primary_transportation
            if primary_transportation == "Yes":
              car_equity
              if car_equity == "under_4k":
                car_collateral
              real_estate
            if primary_transportation == "No":
              real_estate
              if real_estate == "Yes":
                own_home
                if own_home == "Yes":
                  other_real_estate
                  if other_real_estate == "No":
                    farm
  reason_cannot_pay
  exempt_assets
  set_progress(64)
  other_parties.gather()
  original_creditor
  has_attorney_set
  does_party_have_attorney
  collect_attorney_info
  addresses_collected
  show_address_flags_set
  #attorneys.gather()
  #if attorneys.number() > 0:
  #  for attorney in attorneys:
  #    attorney.address.address
  #else:
  #  for party in other_parties:
  #    party.address.address
  #set_progress(32)
  #if attorneys.number() > 0:
  #  for attorney in attorneys:
  #    attorneys[0].fax_number
  #date_answer
  service_of_process
  process_server
  if process_server == "I will":
    service_method
  if process_server == "Someone else":
    server_info
  #if process_server == "Someone else":
  #  for server in servers:
  #    server.address.address
  if process_server == "Not sure yet":
    answer_to_complaint_aos_download
  if service_method == "Mail":
    serve_mail  
    notary_county
  if service_method == "Fax":
    serve_fax
    notary_county
  if service_method == "In Person":
    notary_county
  interview_order_answer_to_complaint_aos = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  answer_to_complaint_aos_intro
  interview_order_answer_to_complaint_aos
  signature_date
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  answer_to_complaint_aos_download
---
id: Answer_to_Debt_Collection_Complaint
continue button field: answer_to_complaint_aos_intro
question: |
  Answer to Debt Collection Complaint
subquestion: |
  If you are being sued for a debt, you can use this interview to respond and claim defenses.
  
  This interview helps create an Answer to a debt collection Complaint, and it gives instructions on what to do next.

  This interview does not give legal advice. It does not address every possible legal defense. Using this program does not mean you have an attorney-client relationship.

  You alone are responsible for the outcome of your case. If you need legal advice, you should contact a lawyer.

  Most people take about 20 minutes to complete this interview.
  
#add a 'do you agree' button w/logic to kick out if answer is 'no'. Do I need this if we'll be updating the Terms of Use to our own and asking users to agree to those??
---
id: ineligible cases
question: |
  Is the debt for this lawsuit from any of the following?
subquestion: |

    - Child support
    - Spousal support
    - Taxes
    - Student loans
yesno: ineligible_cases
---
mandatory: True
code: |
  kick_out
---
id: kick out
event: kick_out
question: |
  You are not eligible for this interview.
subquestion: |
  If your debt is for child support, spousal support, taxes or student loans, this program can not help you.

  Click "Exit" to leave this program and go to LawHelpMN.org.

  If you made a mistake, click "undo."
buttons:
  - Exit: exit
    url: https://lawhelpmn.org
---
code: |
  if the_courts.county_has_one_court(the_county):
    my_court = the_courts.county_court("my_court", the_county)
  else:
    court_index
    my_court = the_courts.as_court("my_court", court_index)
---
code: |
  def get_judicial_district(the_county):
      if the_county in ["McLeod", "Sibley", "Carver", "Scott", "Dakota", "Le Sueur", "Goodhue"]:
          return "First Judicial District"
      elif the_county == "Ramsey":
          return "Second Judicial District"
      elif the_county in ["Rice", "Waseca", "Steele", "Dodge", "Olmsted", "Wabasha", "Winona", "Freeborn", "Mower", "Fillmore", "Houston"]:
          return "Third Judicial District"
      elif the_county == "Hennepin":
          return "Fourth Judicial District"
      elif the_county in ["Lincoln", "Lyon", "Redwood", "Brown", "Nicollet", "Pipestone", "Murray", "Cottonwood", "Watonwan", "Blue Earth", "Rock", "Nobles", "Jackson", "Martin", "Faribault"]:
          return "Fifth Judicial District"
      elif the_county in ["St. Louis", "Lake", "Cook", "Carlton"]:
          return "Sixth Judicial District"
      elif the_county in ["Clay", "Becker", "Otter Tail", "Wadena", "Douglas", "Todd", "Morrison", "Mille Lacs", "Stearns", "Benton"]:
          return "Seventh Judicial District"
      elif the_county in ["Wilkin", "Grant", "Traverse", "Big Stone", "Stevens", "Pope", "Swift", "Lac qui Parle", "Kandiyohi", "Chippewa", "Meeker", "Yellow Medicine", "Renville"]:
          return "Eighth Judicial District"
      elif the_county in ["Kittson", "Roseau", "Lake of the Woods", "Marshall", "Beltrami", "Koochiching", "Pennington", "Red Lake", "Polk", "Clearwater", "Norman", "Mahnomen", "Hubbard", "Cass", "Itasca", "Crow Wing", "Aitkin"]:
          return "Ninth Judicial District"
      elif the_county in ["Pine", "Kanabec", "Sherburne", "Isanti", "Chisago", "Anoka", "Wright", "Washington"]:
          return "Tenth Judicial District"
      else:
          return "Unknown Judicial District"

  trial_court_district = get_judicial_district(the_county)
---
id: district and county
question: |
  What county are you being sued in?
fields:
  - "no label": the_county
    code: sorted(the_courts.county_list())
    required: True
    label above field: True
    datatype: str
  - note: |
      You can find the name of the county in the top left-hand corner of the Complaint.
---
question: |
  There is more than one court in your county. Pick the court below.
fields:
  - "no label": court_index
    code: the_courts.matching_courts_in_county(the_county)
---
continue button field: display_court
question: |
  You selected "${ my_court }"
subquestion: |
  ${ my_court.address.block() }
---
#need to remove this continue button because it's competing w/the field name, but when i remove this, it messes up the interview order
continue button field: docket_number
id: docket number
question: |
  What is the Court File Number used to track this case in court?
fields:
  - I don't know the case number: dont_know_docket_number
    datatype: yesno    
  - Court File Number: docket_number
    hide if: dont_know_docket_number
    help: |
      You can find this in the upper right-hand corner of the Complaint.
---
code: |
  users[i].name.first
  users[i].name.last
  users[i].name.middle
  users[i].name.suffix
  users[i].address.address
  users[i].phone_number
  users[i].complete = True
---
continue button field: users_name
id: User name
question: |
  What is your name?
fields:
  - code: |
      users[0].name_fields()
---
id: users address
question: |
  What is your address?
fields:
  - code: |
      users[0].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE)
---
id: user phone number
question: |
  What is your phone number?
fields:  
  - Phone number: users[0].phone_number
validation code: |
  if not phone_number_is_valid(users[0].phone_number):
    validation_error("Please enter a phone number in the format (xxx) xxx-xxxx", field="phone_number")
  phone_number = phone_number_formatted(users[0].phone_number)
---
id: account number
question: |
  Please enter the account number for this debt, if you have one. 
subquestion: |
  If you have one, it should be mentioned somewhere in the complaint.
fields:
  - "Account number": account_number
    maxlength: 20
    required: False
    help: |
      If you have an account number, it should be mentioned somewhere in the Complaint. If the debt was for a bank or credit card, it may say something like "the account number ending in 1234." It should also be on any piece of mail you got about this debt.
---
id: Admit/deny
question: |
  How will you answer the Complaint? 
subquestion: |
  ${ collapse_template(admit_deny_explanation) }  
fields:
  - "<b>I admit the allegations in these paragraphs of the complaint:</b>": admit
    maxlength: 14
    required: False
    label above field: True
  - "<b>I deny the allegations in these paragraphs of the complaint:</b>": deny
    maxlength: 14
    required: False
    label above field: True
  - "<b>I do not have enough information to form a belief as to the truth, and therefore deny the allegations contained in these paragraphs:</b>": insufficient_info
    maxlength: 14
    required: False
    label above field: True
---
id: Defenses
question: |
  Affirmative Defenses
subquestion: |
  A "defense" is a legal reason why a debt is not owed, or can't be collected from you.
  
  For example, if you already paid the debt, that is a defense. If the debt is too old, that is also a defense.
  
  <b>I claim the following Affirmative Defense(s):</b>
fields:
  - "Service of process was insufficient": defense_insufficient_service
    datatype: yesnowide
  - "Plaintiff has sued the wrong person.": defense_wrong_person
    datatype: yesnowide
  - "I have already paid the debt at issue.": defense_paid
    datatype: yesnowide
  - "I don't owe all of the money alleged.": defense_dont_owe
    datatype: yesnowide
    help: |
      If the case goes to court, the creditor will have to provide proof of what you owe. If you owe some of the money, but are not sure that the amount claimed by the plaintiff is correct, you can say yes to this defense.
  - "Plaintiff is not my creditor.": defense_not_creditor
    datatype: yesnowide
  - "The debt at issue has been discharged by bankruptcy.": defense_bankruptcy
    datatype: yesnowide
  - "I did not sign up for this credit card.": defense_credit_card
    datatype: yesnowide
  - "Someone used my name and identity without my permission.": defense_id_theft
    datatype: yesnowide
    help: |
      Identity theft is when someone gets your personal information (like a social security or bank account number) and uses it to:

        - buy things with your credit card,
        - take money from your bank account,
        - open accounts in your name, or
        - take out loans in your name.
      
      If this debt is from identity theft, tell the plaintiff RIGHT AWAY. Write a letter that says the debt is from identify theft, and make a copy of the letter for your records. If the plaintiff has a lawyer, send the letter to the lawyer. If there is no lawyer, send the letter to the plaintiff. 

      Debts that come from identity theft are not valid. If you use the "Identity Theft Defense" and your case goes to court, you will need to prove that the debt is from identity theft.

      File a police report. Creditors often want to see a police report before they will release a debt for identity theft.
      
  - "There are charges on this account that I did not agree to.": defense_unagreeable_charges
    datatype: yesnowide
  - "I do not recognize the Plaintiff and I never borrowed money from the Plaintiff. Plaintiff has not shown why it has a right to sue me on the alleged debt and the case should be dismissed. Minn.R.Civ.P 17.01.": defense_dont_know_plaintiff
    datatype: yesnowide
---
id: SOL
question: |
  Let's see if you can use the "Statute of Limitations" defense.
subquestion: |
  The Statute of Limitations is a deadline for when anyone can start a lawsuit on the debt by serving you with a Summons and Complaint.

  Different kinds of debt have different deadlines. The "clock" for the deadline started ticking the last time you:

    - paid part of the debt,
    - made a written promise to pay the debt, OR
    - used the account in any way.
   
   Whenever you do any of those things, the deadline clock gets reset. The plaintiff then gets more time to file the lawsuit.

  <b>IMPORTANT!:</b> If you use the Statute of Limitations defense in your Answer and it does not apply, you can be accused of making a "frivolous" claim. That may have serious penalties.
  
  But if you don't use it and find out later that it does apply, you may have missed your best chance to win. If it's not in your Answer, you can't bring it up later. <b>Talk to a lawyer first!</b>
  
fields:
  - <b>What kind of debt do you have?</b>: type_of_debt
    input type: radio
    choices:
      - Credit card 
      - Cell phone
      - Car loan
      - Other
    label above field: True
  - Explain: other_debt
    show if:
      variable: type_of_debt
      is: Other
    input type: area
  - <b>When was the last time you used the account, made a payment, OR, made a written promise to pay?</b>: last_action_credit_card
    input type: radio
    choices:
      - Less than 3 years ago: less_than_3_years 
      - 3 to 6 years ago: 3_to_6_years 
      - 6 or more years ago: 6_or_more_years 
    show if: 
      variable: type_of_debt
      is: Credit card
    label above field: True
  - note: |
      In that case, the Statute of Limitations defense does not apply.
    show if: 
      variable: last_action_credit_card
      is: less_than_3_years
  - note: |
      It is not clear if the Statute of Limitations defense applies to your debt. To find out, you need to ask a lawyer first. 
      
      Your Answer will print with a box you can check to use this defense, <b>after</b> you ask a lawyer. 
    show if: 
      variable: last_action_credit_card
      is: 3_to_6_years
  - note: |
      In that case, you can use the Statute of Limitations defense.
    show if: 
      variable: last_action_credit_card
      is: 6_or_more_years 
  - <b>Do you want to use this defense?</b>: defense_SOL
    input type: radio 
    choices:
      - Yes
      - No
    maxlength: 1
    show if:
      variable: last_action_credit_card
      is: 6_or_more_years 
    label above field: True
  - <b>When was the last time you used the account, made a payment, OR, made a written promise to pay?</b>: last_action_cell_phone
    input type: radio 
    choices:
      - Less than 2 years ago: less_than_2_years 
      - 2 or more years ago: 2_or_more_years 
    show if:
      variable: type_of_debt
      is: Cell phone
    label above field: True
  - note: |
      In that case, the Statute of Limitations defense does not apply.
    show if: 
      variable: last_action_cell_phone
      is: less_than_2_years
  - note: |
      In that case, you can use the Statute of Limitations defense.
    show if: 
      variable: last_action_cell_phone
      is: 2_or_more_years
  - <b>Do you want to use this defense?</b>: defense_SOL
    input type: radio 
    choices:
      - Yes
      - No
    maxlength: 1
    show if:
      variable: last_action_cell_phone
      is: 2_or_more_years 
    label above field: True
  - <b>When was the last time you used the account, made a payment, OR, made a written promise to pay?</b>: last_action_car_loan
    input type: radio    
    choices:
      - Less than 4 years ago: less_than_4_years 
      - 4 or more years ago: 4_or_more_years 
    show if:
      variable: type_of_debt
      is: Car loan
    label above field: True
  - note: |
      In that case, the Statute of Limitations defense does not apply.
    show if: 
      variable: last_action_car_loan
      is: less_than_4_years
  - note: |
      In that case, you can use the Statute of Limitations defense.
    show if: 
      variable: last_action_car_loan
      is: 4_or_more_years
  - <b>Do you want to use this defense?</b>: defense_SOL
    input type: radio 
    choices:
      - Yes
      - No
    maxlength: 1
    show if:
      variable: last_action_car_loan
      is: 4_or_more_years 
    label above field: True
  - <b>When was the last time you used the account, made a payment, OR, made a written promise to pay?</b>: last_action_other
    input type: radio     
    choices:
      - Less than 6 years ago: less_than_6_years 
      - 6 or more years ago:  6_or_more_years 
    show if:
      variable: type_of_debt
      is: Other
    label above field: True
  - note: |
      In that case, the Statute of Limitations defense does not apply.
    show if: 
      variable: last_action_other
      is: less_than_6_years  
  - note: |
     In that case, you can use the Statute of Limitations defense.
    show if: 
      variable: last_action_other
      is: 6_or_more_years 
  - <b>Do you want to use this defense?</b>: defense_SOL
    input type: radio 
    choices:
      - Yes
      - No
    maxlength: 1
    show if:
      variable: last_action_other
      is: 6_or_more_years 
    label above field: True
---
#code: |
#  def get_defense_SOL(type_of_debt, last_action_credit_card=None, last_action_cell_phone=None, last_action_car_loan=None, last_action_other=None):
#      if type_of_debt == "Credit card" and last_action_credit_card == "6_or_more_years":
#          return True
#      elif type_of_debt == "Cell phone" and last_action_cell_phone == "2_or_more_years":
#          return True
#      elif type_of_debt == "Car loan" and last_action_car_loan == "4_or_more_years":
#          return True
#      elif type_of_debt == "Other" and last_action_other == "6_or_more_years":
#          return True
#      else:
#          return False

  # Ensure the variables are set based on user input
#  last_action_credit_card = last_action_credit_card if 'last_action_credit_card' in globals() else None
#  last_action_cell_phone = last_action_cell_phone if 'last_action_cell_phone' in globals() else None
#  last_action_car_loan = last_action_car_loan if 'last_action_car_loan' in globals() else None
#  last_action_other = last_action_other if 'last_action_other' in globals() else None

#  defense_SOL = get_defense_SOL(type_of_debt, last_action_credit_card, last_action_cell_phone, last_action_car_loan, last_action_other)
  # Debugging statement to check defense_SOL value
#  print(f"defense_SOL: {defense_SOL}")
#---
  # add logic in attachments block that if the SOL defense may or does apply, it will say either 'this debt may be too old' or 'this debt is too old'. 


# NOTE: LHI takes the user through an explanation of what 'proof' is and then the SOP portion if the user indicates that want to use the SOL defense that the debt may be or is too old, before getting into income/assets. The 'proof' explanation is skipped if the SOL defense does not apply. This info should go mostly in instructions rather than the interview flow. The interview does ask who will do the service and asks for county of notary but this should go at the end of the info gathering. 
#---
id: exemptions
mandatory: False
continue button field: exemptions
question: |
  Exempt income and assets
subquestion: |
  Even if the plaintiff wins in court, there are some income and assets they can never take. These are called "Exempt" income and assets.
  
  Let's find out if your income and assets are Exempt.
---
id: need_based
question: |
  Do you currently get money from any of the following government programs?
subquestion: |
  Select all that apply. 
fields: 
  - "no label": need_based
    datatype: checkboxes
    choices:
      - SSI - Supplemental Security Income
      - MFIP - Minnesota Family Investment Program
      - MFIP Diversionary Work Program
      - Work Participation Cash Benefit
      - GA - General Assistance
      - EA - Emergency Assistance
      - MA - Medical Assistance
      - EGA - Emergency General Assistance
      - MSA - Minnesota Supplemental Aid
      - MSA-EA - MSA Emergency Assistance
      - Food Support
      - MinnesotaCare
      - Medicare Part B Premium Payments
      - Medicare Part D Extra Help
      - Energy or Fuel Assistance
      - Other need based 
    label above field: True
  - Explain: other_exempt_need_based
    show if: need_based["Other need based"]
    input type: area
---
id: non_need_based
question: |
  Do you get income from any of the following sources?
subquestion: |
  Select all that apply.
fields: 
  - "no label": non_need_based
    datatype: checkboxes
    choices:
      - Workers Compensation 
      - Unemployment
      - Veteran Benefits 
      - Social Security 
      - Child Support 
      - Damages from an accident
      - Disability payments 
      - Retirement pension or annuity 
      - Life insurance payments 
      - Money earned by any child of yours who is under age 18 
      - Money from a claim for damage or destruction of property
      - Death benefits 
      - Other non-need based 
    label above field: True
  - Explain: other_exempt_non_need
    show if: non_need_based["Other non-need based"] 
    input type: area
---
id: job income
question: |
  Do you get any money from a job?
fields:
  - "no label": job_income
    datatype: radio
    choices:
      - Yes
      - No
  - note: |
      It looks like some of your income may be Exempt, but not all of it. 
    show if: 
      variable: job_income
      is: Yes   
  - <b>Do you have any income at all?</b>: any_income
    label above field: True
    help: |
      Income can be money from any of the following sources (this is not a complete list):
      
      - Self employment income
      - Farming income
      - Alimony or spousal support
      - Investment income
      - Interest or dividends from property or real estate
      - Stocks or bonds
      - Income from rental property
      - Pension, PERS or 401(k) retirement benefits
      - Social Security
      - SSI
      - Disability Benefits
      - Veterans Benefits
      - Child Support
      - MN Family Investment Program (MFIP)
      - General Assistance (GA)
      - Other cash assistance from the Department of Human Services
      - Workers Comp
      - Job / Employment
      - Unemployment benefits
    datatype: radio
    choices: 
      - Yes
      - No
    show if:
      variable: job_income
      is: No
  - note: |
      It looks like some of your income may be Exempt, but not all of it. 
    show if: 
      variable: any_income
      is: Yes   
  - <b>Do you have any money in a bank account that doesn't come from any of the following?</b>: bank_account
    label above field: True
    under text: |
     - SSI - Supplemental Security Income
     - MFIP - Minnesota Family Investment Program
     - MFIP Diversionary Work Program
     - Work Participation Cash Benefit
     - GA - General Assistance
     - EA - Emergency Assistance
     - MA - Medical Assistance
     - EGA - Emergency General Assistance
     - MSA - Minnesota Supplemental Aid
     - MSA-EA - MSA Emergency Assistance
     - Food Support
     - MinnesotaCare
     - Medicare Part B Premium Payments
     - Medicare Part D Extra Help
     - Energy or Fuel Assistance
     - Child Support
     - Social Security
     - Workers' Compensation
     - Unemployment Benefits
     - Veterans' Benefits
     - Income from a minor child
     - Life insurance payments
     - Money from an accident
     - Money from disability
     - Retirement pension
     - Retirement annuity
     - Death benefits
     - Money from a claim for damaged or destroyed property
     
     <b>If you are not sure, answer "Yes."</b>
    datatype: radio
    choices:
      - Yes
      - No
    show if: 
      variable: any_income
      is: No
  - note: |
      <i>Your cover letter will also say that any money in your bank account is Exempt.</i>
    show if: 
      variable: bank_account
      is: No
---
code: |
  no_income = (
      need_based.all_false() and
      non_need_based.all_false() and
      job_income == "No" and
      any_income == "No" 
  )
---
code: |
  formatted_need_based = [
      item if item != "Other need based" else other_exempt_need_based
      for item in need_based.true_values()
  ]

  formatted_non_need_based = [
      item if item != "Other non-need based" else other_exempt_non_need
      for item in non_need_based.true_values()
  ]
---

template: reason_cannot_pay
content: |
  % if job_income == 'No' and need_based.any_true() and non_need_based.any_true():
  I am currently a recipient of need-based assistance and I have no job earnings. All of my income comes from the following exempt sources: ${ comma_and_list(formatted_need_based + formatted_non_need_based) }.
  % elif job_income == 'No' and need_based.any_true() and non_need_based.all_false():
  I am currently a recipient of need-based assistance and I have no job earnings. All of my income comes from the following exempt sources: ${ comma_and_list(formatted_need_based) }.
  % elif job_income == 'No' and non_need_based.any_true() and need_based.all_false():
  I have no job earnings, and all of my income comes from the following exempt sources: ${ comma_and_list(formatted_non_need_based) }. 
  % elif no_income:
  I have no income whatsoever.
  % else:
  ${ log("🤕reason_cannot_pay logic didn't work correctly") or "" }
  % endif
---
id: proof
question: |
  It may help to include proof of this with your letter. 
subquestion: |
  <b>Will you include proof in your letter?</b>
fields:
  - "no label": proof
    datatype: radio
    choices:
      - Yes
      - No
  - note: |
      Proof could be a copy of a check stub, a bank statement going back 60 days, a copy of a check, or any document that shows where your income comes from. 
# add logic to ask if proof will be included if job income = no, and any income = no,  and bank account = yes or no. Then follow up by asking 'Is all of your income used to meet basic living expenses? If so, do you want your letter to say so?'. This should then route to the long_term_income question. 
---
id: basic_living_expenses
question: |
  Is all of your income used to meet basic living expenses?
subquestion: |
  If so, your letter will say so. If you don't want your letter to say so, answer No.
fields:
  - "no label": basic_living_expenses
    datatype: radio
    choices:
      - Yes
      - No
---
id: long term income prospect
question: |
  Do you expect your income to stay the same for the long term future? 
fields: 
  - "no label": long_term_income
    datatype: radio
    choices:
      - Yes
      - No
  - <b>Do you want your cover letter to say so?</b>: long_term_income_yes
    datatype: radio
    choices:
      - Yes
      - No
    label above field: True
    show if:
      variable: long_term_income
      is: Yes 
---
# this only appears if income exemption questions (job_income and any_income are No. bank_account can be either yes or no. This question follows long_term_income for either yes or no responses.)
id: asset_exemptions
mandatory: False
continue button field: asset_exemptions
question: |
  Next, let's see if any of your assets other than money are Exempt.
---
id: exempt assets - cars
#continue button field: own_car
question: |
  Do you own a car or other motor vehicle?
fields:
  - "no label": own_car
    datatype: radio
    choices:
      - Yes
      - No
    label above field: True
  - <b>Do you own more than one vehicle?</b>: multiple_cars
    datatype: radio 
    choices:
      - Yes
      - No
    show if:
      variable: own_car
      is: Yes 
    label above field: True
  - note: |
      Your motor vehicle assets may not be Exempt. 
    show if: 
      variable: multiple_cars
      is: Yes
  - <b>Is the vehicle your primary source of transportation?</b>: primary_transportation
    datatype: radio
    choices:
      - Yes
      - No
    show if:
      variable: multiple_cars
      is: No
    label above field: True
  - note: |
      Your motor vehicle assets may not be Exempt. 
    show if: 
      variable: primary_transportation
      is: No
---
id: car_equity
question: |
  How much Equity do you have in your motor vehicle?
subquestion: |
  Up to $4,400 of the "Equity" you have in your motor vehicle is Exempt.
field: car_equity
buttons:
  - More than $4,400: over_4k
  - $4,400 or less: under_4k
  - I do not know: unknown_car_equity
#if exempt (4,400 or less), the letter should say so. what does LHI display on the letter if the user enters I don't know? 
---
id: car_collateral
question: |
  Is your debt related to payments for your motor vehicle(s)? Or, did you use the motor vehicle(s) as "collateral" for the debt?
fields: 
  - "no label": car_collateral 
    datatype: radio
    choices:
      - Yes
      - No
  - note: |
      Your motor vehicle is not Exempt if the debt is for the motor vehicle.
    show if: 
      variable: car_collateral
      is: Yes
---
id: real estate
question: |
  Do you own any real estate, including your home?
subquestion: |  
  Making mortgage payments counts as owning your home.
fields:
  - "no label": real_estate
    datatype: radio
    choices: 
      - Yes
      - No
  - <b>Do you own your home?</b>: own_home
    datatype: radio
    choices:
      - Yes
      - No
    label above field: True
    show if:
      variable: real_estate 
      is: Yes
  - <b>Do you own any real estate apart from your home?</b>: other_real_estate
    datatype: radio
    choices:
      - Yes
      - No
    label above field: True
    show if:
      variable: own_home
      is: Yes
  - Up to $360,000 of your Equity in your home is Exempt. If your home is a farm and you use it for agriculture, up to $900,000 of your Equity is Exempt. <b>Is your home a farm, used for agriculture?</b>: farm
    datatype: radio
    choices:
      - Yes
      - No
    label above field: True
    show if:
      variable: other_real_estate
      is: No
  - <b>How much Equity do you have in your home?</b>: home_equity_farm_yes
    datatype: radio
    choices:
      - More than $900,000 
      - $900,000 or less 
      - I do not know 
    label above field: True
    show if:
      variable: farm
      is: Yes
  - <b>Is your debt related to payments for your home? Or, did you use your home as "collateral" for the debt?</b>: home_collateral
    datatype: radio
    choices:
      - Yes
      - No
    label above field: True
    show if:
      variable: home_equity_farm_yes
      is: $900,000 or less
  - <b>How much Equity do you have in your home?</b>: home_equity_farm_no
    datatype: radio
    choices:
      - More than $360,000 
      - $360,000 or less 
      - I do not know 
    label above field: True
    show if:
      variable: farm
      is: No
  - <b>Is your debt related to payments for your home? Or, did you use your home as "collateral" for the debt?</b>: home_collateral
    datatype: radio
    choices:
      - Yes
      - No
    label above field: True
    show if:
      variable: home_equity_farm_no
      is: $360,000 or less
  - note: |
      Your home Equity is not Exempt.
    show if: 
      variable: home_collateral
      is: Yes
---
code: |
  car_exempt = (
      own_car == "Yes" and
      multiple_cars == "No" and
      primary_transportation == "Yes" and
      car_equity in ["under_4k"] and
      car_collateral == "No"
  )
---
code: |
  if real_estate == "No":
      own_home = "No"
---
code: |
  home_exempt = (
      real_estate == "Yes" and
      own_home == "Yes" and 
      other_real_estate == "No" and 
      ( 
      (farm == "No" and home_equity_farm_no == "$360,000 or less" and home_collateral == "No") or 
      (farm == "Yes" and home_equity_farm_yes == "$900,000 or less" and home_collateral == "No")
      )
  )
---
template: exempt_assets
content: |
  % if own_car == 'Yes' and own_home == 'Yes' and car_exempt and home_exempt: 
  Furthermore, my home and motor vehicle are exempt from collection. 
  % elif own_car == 'Yes' and own_home == 'Yes' and car_exempt and not home_exempt:
  Furthermore, my motor vehicle is exempt from collection.
  % elif own_car == 'Yes' and (real_estate == 'No' or (real_estate == 'Yes' and defined("own_home") and own_home == 'No')) and car_exempt:
  Furthermore, I do not own a home and my motor vehicle is exempt from collection
  % elif not car_exempt and own_home == 'Yes' and home_exempt:
  Furthermore, my home is exempt from collection.
  % elif own_car == 'Yes' and not car_exempt and (real_estate == 'No' or (real_estate == 'Yes' and defined("own_home") and own_home == 'No')):
  Furthermore, I do not own a home.
  % elif own_car == 'No' and own_home == 'Yes' and home_exempt:
  Furthermore, my home is exempt from collection and I do not own a motor vehicle
  % elif own_car == 'No' and own_home == 'Yes' and not home_exempt:
  Furthermore, I do not own a motor vehicle.
  % elif own_car == 'No' and (real_estate == 'No' or (real_estate == 'Yes' and defined("own_home") and own_home == 'No')):
  Furthermore, I do not own a home or motor vehicle. 
  % else:
  ${ log("🤕exempt_assets logic didn't work correctly") or "" }
  % endif
---
sets:
  - other_parties[i].name.first
  - other_parties[i].name.last
  - other_parties[i].name.middle
  - other_parties[i].name.suffix
id: names of opposing parties
question: |
  % if user_started_case:
  Name of ${ ordinal(i) } **defendant** or respondent in this
  matter
  % else:
  Name of **plaintiff** or petitioner in this matter
  % endif
fields:
  - code: |
      other_parties[i].name_fields(person_or_business='unsure')
---
id: original creditor
question: |
  Is the Plaintiff the "original creditor" for this debt?
subquestion: |
  ${ collapse_template(original_creditor_explanation) }
fields:
  - "no label": original_creditor
    datatype: radio
    choices:
      - Yes
      - No
      - Not sure
    label above field: True
  - note: |
      If the plaintiff is not the original creditor, they have to follow strict rules to prove they really own the debt. Try to talk to a lawyer about this. You should still finish making your Answer today. 
      
      If you try to talk to a lawyer before you serve and file your Answer, <b>make sure you meet the 20 day deadline!</b>
    show if: 
      variable: original_creditor
      is: No
  - note: |
      If the plaintiff is not the original creditor, they have to follow strict rules to prove they really own the debt. Try to talk to a lawyer about this. You should still finish making your Answer today. 
      
      If you try to talk to a lawyer before you serve and file your Answer, <b>make sure you meet the 20 day deadline!</b>
    show if: 
      variable: original_creditor
      is: Not sure
---
#id: attorneys
#generic object: ALPeopleList
#question: |
#  Does ${ other_parties } have any attorneys?
#fields:
#  - no label: attorneys.there_are_any
#    datatype: yesnoradio
---
#testing
#id: assign attorney
#question: |
#  Who is the attorney for ${ other_parties[i] }?
#fields:
#  - no label: other_parties[i].attorney
#    datatype: object
#    object labeler: |
#      lambda y: y.name.full()
#    choices: attorneys
#    show if: other_parties[i].has_attorney
id: does_party_have_attorney
question: |
  Does ${ other_parties[i] } have an attorney?
fields:
  - no label: other_parties[i].has_attorney
    datatype: yesnoradio
---
id: collect_attorney_info
question: |
  What is the attorney's name and address for ${ other_parties[i] }?
fields:
  - First name: other_parties[i].attorney.name.first
  - Last name: other_parties[i].attorney.name.last
  - Address: other_parties[i].attorney.address.address
  - City: other_parties[i].attorney.address.city
  - State: other_parties[i].attorney.address.state
  - Zip: other_parties[i].attorney.address.zip
show if: other_parties[i].has_attorney
---
id: attorney fax number
generic object: ALIndividual
question: |
  What is ${noun_plural(attorneys)}'s fax number?
fields:
  - no label: x.fax_number
validation code: |
      if not phone_number_is_valid(x.fax_number):
        validation_error("Please enter a fax number in the format (xxx) xxx-xxxx", field="x.fax_number")
      x.fax_number = phone_number_formatted(x.fax_number)
---
#testing
id: set default has_attorney
mandatory: True
code: |
  for party in other_parties:
      if not hasattr(party, 'has_attorney'):
          party.has_attorney = False
  has_attorney_set = True
---
#testing

id: collect addresses
mandatory: True
code: |
  for party in other_parties:
      if not party.has_attorney:
          party.address.address
      else:
          party.attorney.address.address
          party.attorney.fax_number
  addresses_collected = True
---
#testing
id: set show_address flags
mandatory: True
code: |
  for party in other_parties:
      if not hasattr(party, 'attorney') or not hasattr(party.attorney, 'address') or not defined('party.attorney.address.address'):
          party.show_address = True
      else:
          party.show_address = False
  show_address_flags_set = True
---
id: service of process explained
mandatory: False
continue button field: service_of_process
question: |
  You need to give the other side a copy of your answers. This is called "Service of Process". 
subquestion: |
  The person who serves your Answer is the "Server." You can be the Server, or someone else can be the Server for you. If someone else is the Server, they need to be 18 or older. It's usually best for someone else to be the Server for you. If the plaintiff says he or she did not get the Answer, the Server can help prove it was Served.

  The Server has to do 2 things:
  
  1. Deliver the Answer to the plaintiff or the plaintiff's lawyer (if there is one) by mail, fax, or in person.
  
  2. Sign an "Affidavit of Service" form <b>in front of a Notary Public</b>. An Affidavit is a sworn, written statement that you give to the court and the other party. An "Affidavit of Service" is an Affidavit that basically says, "I swear that I have served the Answer to the plaintiff."

    The Server can't just sign the Affidavit of Service any time, anywhere. They need to first send a copy of the Answer. Then, sign the Affidavit in front of a Notary Public or court clerk, who will notarize it.

  <b>DO NOT sign the Affidavit of Service UNLESS a Notary Public is there to witness it. Otherwise, it will not be valid, and you may lose the case.</b>
---
id: process server
question: |
  Who will be the process server?
fields: 
  - no label: process_server
    datatype: radio
    choices: 
      - I will
      - Someone else 
      - Not sure yet
    label above field: True
  - note: |
      Even though you do not know, the Affidavit of Service will still print out. It will say that the Answer was Served through the mail. That is because service by mail is usually easiest, and is most common.
    show if:
      variable: process_server
      is: Not sure yet
---
id: service method
question: |
   How will the Answer be served?
fields: 
  - "no label": service_method
    datatype: radio
    choices:
      - Mail 
      - Fax 
      - In Person 
      - I don't know
    label above field: True
  - note: |
      Even though you do not know, the Affidavit of Service will still print out. It will say that the Answer was Served through the mail. That is because service by mail is usually easiest, and is most common.
    show if:
      variable: service_method
      is: I don't know
---
id: service by mail
question: |
  Service by Mail
fields: 
  - What city will you mail the Answer from?: serve_mail
    required: False
    label above field: True
---
id: service by fax
question: |
  Service by Fax
fields: 
  - What is the fax number you will send the Answer to?: serve_fax
    required: False
    label above field: True
validation code: |
      if not phone_number_is_valid(serve_fax):
        validation_error("Please enter a fax number in the format (xxx) xxx-xxxx", field="serve_fax")    
      serve_fax = phone_number_formatted(serve_fax)
---
id: service county
question: |
  In what county will you get the Affidavit of Service Notarized?
fields:
  - "no label": notary_county
    code: sorted(the_courts.county_list())
    required: False
    label above field: True
---
id: server info
continue button field: server_info
question: |
  % if process_server == "Someone else":
  Tell us about the person who will serve the papers.
  % endif

fields:
  - What is your Server's name?: server_name
    datatype: text
    label above field: True
    show if:
      variable: process_server
      is: Someone else
  - Do you know their address?: server_address_known
    datatype: radio
    choices:
      - Yes
      - No
    label above field: True
  - code: |
      server_address.address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_if={ "variable": "server_address_known", "is": "Yes" })   
---
code: |
  if process_server == "I will":
      server_name = users[0].name.full()
      server_address = users[0].address
      server_address_known = "Yes"
---
mandatory: True
question: |
  Give us your feedback
subquestion: |
  ${ only_once_review_widget() }
---
id: preview answer_to_complaint_aos
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_answer_to_complaint_aos'), label='Edit answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: answer_to_complaint_aos_preview_question    
---
code: |
  signature_fields = []
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  [user.address.address for user in users.complete_elements()]
  addresses_to_search = [user.address for user in users.complete_elements()]
---
id: answer to complaint aos review screen
event: review_answer_to_complaint_aos
question: |
  Review your answers
review:
  - raw html: |
      ${ start_accordion('Filing Court') }  
#  - Edit: trial_court_district
#    button: |
#      **Judicial District**:
#      ${ trial_court_district }
#  - Edit: trial_court_district
#    button: |
#      **State**:
#      ${ trial_court_state }
  - html: |
      <div class="court-info">
        <strong>Court Address:</strong>
        <p>${ my_court.address.block().replace('[NEWLINE]', '<br>') }</p>
      </div>
  - Edit: the_county
    button: |
      **County**:
      ${ the_county }
  - Edit: docket_number
    button: |
      **Case number**:
      ${ docket_number }
  - raw html: |
      ${ next_accordion('Your Information') }
  - Edit: users.revisit
    button: |
      **Edit your name, address, and phone Number:**

      % for item in users:
        * ${ item }
      % endfor
  - raw html: |
      ${ next_accordion('Plaintiff') }
  - Edit: other_parties.revisit
    button: |
      **Add or edit name, address, and fax Number for:**

      % for item in other_parties:
        * ${ item } 
      % endfor
  - Edit: original_creditor
    button: |
      **Original Creditor:**
      ${ word(yesno(original_creditor)) }
  - Edit: attorneys.revisit
    button: |
      **Plaintiff's Attorney:**

      % for item in attorneys:
        * ${ item }
      % endfor
  - raw html: |
      ${ next_accordion('Debt Information') }
  - Edit: account_number
    button: |
      **Account number:**
      ${ account_number }
  - Edit: admit
    button: |
      **Admit Allegations:**
      ${ admit }
  - Edit: deny
    button: |
      **Deny Allegations:**
      ${ deny }
  - Edit: insufficient_info
    button: |
      **Insufficient Info to Admit or Deny Allegations:**
      ${ insufficient_info }
  - raw html: |
      ${ next_accordion('Affirmative Defenses') }
  - Edit: defense_insufficient_service
    button: |
      **Service of process was insufficient:**
      ${ word(yesno(defense_insufficient_service)) }
  - Edit: defense_wrong_person
    button: |
      **Plaintiff has sued the wrong person:**
      ${ word(yesno(defense_wrong_person)) }
  - Edit: defense_paid
    button: |
      **I have already paid the debt at issue:**
      ${ word(yesno(defense_paid)) }
  - Edit: defense_dont_owe
    button: |
      **I don't owe all of the money alleged:**
      ${ word(yesno(defense_dont_owe)) }
  - Edit: defense_not_creditor
    button: |
      **Plaintiff is not my creditor:**
      ${ word(yesno(defense_not_creditor)) }
  - Edit: defense_bankruptcy
    button: |
      **The debt at issue has been discharged by bankruptcy:**
      ${ word(yesno(defense_bankruptcy)) }
  - Edit: defense_credit_card
    button: |
      **I did not sign up for this credit card:**
      ${ word(yesno(defense_credit_card)) }
  - Edit: defense_id_theft
    button: |
      **Someone used my name and identity without my permission:**
      ${ word(yesno(defense_id_theft)) }
  - Edit: defense_unagreeable_charges
    button: |
      **There are charges on this account that I did not agree to:**
      ${ word(yesno(defense_unagreeable_charges)) }
  - Edit: defense_dont_know_plaintiff
    button: |
      **I do not recognize the Plaintiff and I never borrowed money from the Plaintiff:**
      ${ word(yesno(defense_dont_know_plaintiff)) }
  - Edit: defense_SOL
    button: |
      **Plaintiff’s claims are barred by the applicable statute of limitations:**
      ${ word(yesno(defense_SOL)) }
  - raw html: |
      ${ next_accordion('Income Exemptions') }
  - Edit: need_based
    button: |
      **Government Assistance:**
      
      - **Need Based:**
      % if "Other need based" in need_based.true_values():
        ${ ", ".join([item if item != "Other need based" else other_exempt_need_based for item in need_based.true_values()]) }
        % else:
          ${ ", ".join(need_based.true_values()) }
         % endif
  - Edit: non_need_based
    button: |
      
      - **Non-Need Based:**
      % if "Other non-need based" in non_need_based.true_values():
       ${ ", ".join([item if item != "Other non-need based" else other_exempt_non_need for item in non_need_based.true_values()]) }
       % else:
         ${ ", ".join(non_need_based.true_values()) }
       % endif

#  - Edit: other_exempt
#    button: |
#      **Other exempt income**:
#      ${ other_exempt }
#    show if: non_need_based['other_exempt']
  - Edit: job_income
    button: |
      **Job Income:**
      ${ word(job_income) }
  - Edit: any_income
    button: |
      **Any Income:**
      ${ word(any_income) }
    show if: job_income
  - Edit: bank_account
    button: |
      **Money in the bank that is NOT from exempt sources:**
      ${ word(bank_account) }
  - Edit: long_term_income
    button: |
      **Income Prospects:**
      ${ word(long_term_income) }
#  % if show_asset_exemptions():
  - raw html: |
      ${ next_accordion('Asset Exemptions') }
  - Edit: own_car
    button: |
      **Vehicles:**

      - **Do you own a vehicle?:** 
      ${ word(own_car) }
       % if defined("multiple_cars"):
       - **Do you own more than one vehicle?:** 
       ${ word(multiple_cars) }
       % endif
       % if defined("primary_transportation"):
       - **Is the vehicle your primary source of transportation?:** 
       ${ word(primary_transportation) }
       % endif

  - Edit: real_estate
    button: | 
      **Real Estate:**
      
      - **Do you own any real estate?:** ${ word(real_estate) }
       % if defined("own_home"):
       - **Do you own your home?:** 
       ${ word(own_home) }
       % endif
       % if defined("other_real_estate"):
       - **Do you own any other real estate?:** 
       ${ word(other_real_estate) }
       % endif
       % if defined("farm"):
       - **Is your home used for farm or agriculture?:** 
       ${ word(farm) }
       - **Home equity (if farm):** 
       ${ home_equity_farm_yes if farm == 'Yes' else 'Not Applicable' }
       - **Home equity (if not farm):** 
       ${ home_equity_farm_no if farm == 'No' else 'Not Applicable' }
       % endif
       % if defined("home_collateral"):
       - **Home collateral:** ${ word(home_collateral) }
       % endif

#      % if 'home_collateral' in globals():
#        - **Home collateral:** ${ home_collateral }
#      % else:
#        - **Home collateral:** Not applicable
#      % endif
#  % endif
  - raw html: |
      ${ next_accordion('Service of Process') }
  - Edit: process_server
    button: |
      **Who will serve the papers?**
      ${ process_server }
  - Edit: notary_county
    button: |
      **Notary county:**
      ${ notary_county }
  - raw html: |
      ${ end_accordion() }
---
continue button field: attorneys.revisit
question: |
  Edit attorneys
subquestion: |
  ${ attorneys.table }

  ${ attorneys.add_action() }
---
table: attorneys.table
rows: attorneys
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - Fax number: |
      row_item.fax_number if defined("row_item.fax_number") else ""
edit:
  - name.first
  - address.address
  - fax_number
confirm: True

---
continue button field: other_parties.revisit
question: |
  Edit Plaintiff
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
#  - Address: |
#      row_item.address.block() if defined("row_item.address.address") else ""
  - Address: |
      row_item.address.block() if row_item.show_address() and defined("row_item.address.address") else ""
edit:
  - name.first
  - address.address
confirm: True
---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.address if defined("row_item.address.address") else ""
  - Phone number: |
      row_item.phone_number if defined("row_item.phone_number") else ""
edit:
  - name.first
  - address.address
  - phone_number
confirm: True

---
id: download answer_to_complaint_aos
event: answer_to_complaint_aos_download
question: |
  All done
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_answer_to_complaint_aos'), label='Edit answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

progress: 100
---
# ALDocument objects specify the metadata for each template
objects:
  - answer_to_complaint_aos_Post_interview_instructions: ALDocument.using(title="Instructions", filename="answer_to_complaint_aos_next_steps.docx", enabled=True, has_addendum=False)
  - answer_to_complaint_aos: ALDocument.using(title="Answer to complaint aos", filename="answer_to_complaint_aos", enabled=True, has_addendum=False, )
  - answer_to_complaint_form: ALDocument.using(title="Answer to complaint form", filename="answer_to_complaint_form", enabled=True, has_addendum=False, )
  - answer_to_complaint_letter: ALDocument.using(title="Answer to complaint letter", filename="answer_to_complaint_letter", enabled=True, has_addendum=False, )
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[answer_to_complaint_aos_Post_interview_instructions, answer_to_complaint_aos, answer_to_complaint_form, answer_to_complaint_letter], filename="answer_to_complaint_aos", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[answer_to_complaint_aos, answer_to_complaint_form, answer_to_complaint_letter],  filename="answer_to_complaint_aos", title="All forms to deliver to court", enabled=True)
---
# Each attachment defines a key in an ALDocument. We use `i` as the placeholder here so the same template is 
# used for "preview" and "final" keys, and logic in the template checks the value of 
# `i` to show or hide the user's signature
attachment:
  name: Post-interview-Instructions
  filename: answer_to_complaint_aos_next_steps
  docx template file: answer_to_complaint_aos_next_steps.docx
  variable name: answer_to_complaint_aos_Post_interview_instructions[i]
  skip undefined: True
  tagged pdf: True
---
attachment:
  name: answer to complaint aos
  filename: answer_to_complaint_aos
  variable name: answer_to_complaint_aos[i]
  skip undefined: True
  pdf template file: answer_to_complaint_aos.pdf
  fields:
      - "trial_court_district": ${ trial_court_district }  
      - "docket_number": ${ docket_number }
      - "the_county": ${ the_county }
      - "notary_county": ${ notary_county }
#      - "users1_name": ${ users[0] }
      - "server_name": ${ server_name }
      - "server_address_line_one": ${ server_address.line_one() }
      - "server_address_line_two": ${ server_address.line_two() }
      - "server_phone_number": ${ server[0].phone_number }
      - "service_method": ${ service_method }
      - "attorneys_name": ${ attorneys[0] }
      - "attorneys_address_address": ${ attorneys[0].address.address }
      - "attorneys_address_line_two": ${ attorneys[0].address.line_two() }
---
attachment:
  name: answer to complaint form
  filename: answer_to_complaint_form
  variable name: answer_to_complaint_form[i]
  skip undefined: True
  pdf template file: answer_to_complaint_form.pdf
  fields:
      - "trial_court_district": ${ trial_court_district } 
      - "docket_number": ${ docket_number }
      - "the_county": ${ the_county }
      - "date_answer": ${ date_answer }
      - "other_parties1_name": ${ other_parties[0] }
      - "users1_name": ${ users[0] }
      - "users1_address_line_one": ${ users[0].address.line_one() }
      - "users1_address_line_two": ${ users[0].address.line_two() }
      - "users1_phone_number": ${ users[0].phone_number }
      - "admit": ${ admit }
      - "deny": ${ deny }
      - "insufficient_info": ${ insufficient_info }
      - "defense_insufficient_service": ${ defense_insufficient_service }
      - "defense_wrong_person": ${ defense_wrong_person }
      - "defense_paid": ${ defense_paid }
      - "defense_dont_owe": ${ defense_dont_owe }
      - "defense_not_creditor": ${ defense_not_creditor }
      - "defense_bankruptcy": ${ defense_bankruptcy }
      - "defense_credit_card": ${ defense_credit_card }
      - "defense_id_theft": ${ defense_id_theft }
      - "defense_unagreeable_charges": ${ defense_unagreeable_charges }
      - "defense_dont_know_plaintiff": ${ defense_dont_know_plaintiff }
      - "defense_SOL": ${ defense_SOL } 
      - "date_answer": ${ today() }
---
attachment:
  name: answer to complaint letter
  filename: answer_to_complaint_letter
  variable name: answer_to_complaint_letter[i]
  skip undefined: True
  docx template file: answer_to_complaint_debt_collection_docx_template.docx 
  tagged pdf: True
  fields:
      - "attorneys_name": ${ attorneys[0] }
      - "attorneys_address_address": ${ attorneys[0].address.address }
      - "attorneys_address_line_two": ${ attorneys[0].address.line_two() }
      - "attorneys_fax_number": ${ attorneys[0].fax_number }
      - "date_answer": ${ today() }
      - "other_parties1_name": ${ other_parties[0] }
      - "users1_name": ${ users[0] }
      - "account_number": ${ account_number }
      - "need_based": ${ need_based }
      - "non_need_based": ${ non_need_based }
      - "no_income": ${ no_income }


#car_equity: if exempt (4,400 or less), the letter should say so. what does LHI display on the letter if the user enters I don't know? 



